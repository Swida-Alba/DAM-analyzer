% Merge data generated by DAM_actograph.m across different trials

tic;
clear;
close all;
warning off;
addpath('functions');

%% parameters
save_path = '/Users/apple/Desktop/MyRuntest'; % path to save the merged data
save_name = 'merged_actograph'; % name of the merged data file

peaktime_file = ''; % path to the customed peaktime file.

% load data
data_sources = { % paths to the stat files generated by DAM_stat.m
    '/Users/apple/Desktop/MyRun0524/actograph_05080630-05211200';
    '/Users/apple/Desktop/MyRun0524/actograph_05080630-05211200';
};

prompt = 'Merge mode (inner/outer): ';
merge_mode = questdlg(prompt, 'Merge mode', 'inner', 'outer', 'inner'); % 'inner' or 'outer' join mode for merging data, 'inner' is an intersection of all group names, 'outer' is a union of all group names
% merge_mode = 'inner';

Y_max_actograph = 150;

picture_format = 'png'; % 'png' and 'pdf' are recommanded 
picture_resolution = 150; % resolution of the picture
picture_fontsize = 16;

peakline_colors = {'k', [199 62 58]/255, [78 79 151]/255};

%% init
CheckDir(save_path);
time_stamp = string(datetime("now",'Format','yyyyMMddHHmmss'));
save_folder = fullfile(save_path, save_name + "_" + time_stamp);
mkdir(save_folder);

source_N = length(data_sources);
group_name = cell(source_N, 1);
protocols = cell(source_N, 1);
protocolMats_LD = cell(source_N, 1);
protocolMats_peak = cell(source_N, 1);
peaktime_methods = cell(source_N, 1);

fprintf('Validating data sources...\n');
for i = 1:source_N
    fprintf('\t');
    CheckDir(data_sources{i});
    file_list = dir(fullfile(data_sources{i}, 'info_*.mat'));
    LL_info = load(fullfile(data_sources{i}, file_list(1).name));
    group_name{i} = LL_info.group_names;
    protocols{i} = LL_info.protocol;
    protocolMats_LD{i} = LL_info.colorPatch{1}.ProtocolMat; % only the color patch of LD is used in cross-trial validation
    if i == 1
        colorPatch = LL_info.colorPatch;
    end
    
    file_list = dir(fullfile(data_sources{i}, 'peak_estimates_*.mat'));
    LL_peak = load(fullfile(data_sources{i}, file_list(1).name));
    peaktime_methods{i} = LL_peak.peaktime_method;
    protocolMats_peak{i} = LL_peak.colorPatch_peak{1}.ProtocolMat;
    if i == 1
        peaktime_method = LL_peak.peaktime_method;
        colorPatch_peak = LL_peak.colorPatch_peak;
    end
end

%% cross-trial validation of parameters
% 1. group names
group_names = group_name{1};
if strcmp(merge_mode, 'inner')
    for i = 2:source_N
        group_names = intersect(group_names, group_name{i});
    end
elseif strcmp(merge_mode, 'outer')
    for i = 2:source_N
        group_names = union(group_names, group_name{i});
    end
else
    error('Invalid merge mode');
end

group_N = length(group_names);
if group_N == 0
    error('No common group names found');
end

% 2. protocols
if ~isequal(protocols{:})
    error('Protocols (`protocol`) are not consistent across different data sources');
end
% 3. protocolMats_LD
if ~isequal(protocolMats_LD{:})
    error('ProtocolMats_LD (`colorPatch{1}.ProtocolMat`) are not consistent across different data sources');
end
% 4. protocolMats_peak
if ~isequal(protocolMats_peak{:})
    error('ProtocolMats_peak (`colorPatch_peak{1}.ProtocolMat`) are not consistent across different data sources');
end
% 5. peaktime_methods
if ~isequal(peaktime_methods{:})
    error('Peaktime methods (`peaktime_method`) are not consistent across different data sources');
end

%% write data source to txt
fid = fopen(fullfile(save_folder, 'data_sources.txt'), 'w');
fprintf(fid, 'Data sources:\n');
for i = 1:source_N
    fprintf(fid, '\t%s\n', data_sources{i});
end
fprintf(fid, '\n');
fprintf(fid, 'merge_mode: %s\n', merge_mode);
fprintf(fid, '\n');
fprintf(fid, 'Group names:\n');
for g = 1:group_N
    fprintf(fid, '\t%s\n', group_names{g});
end
fprintf(fid, '\n');
fclose(fid);

%% merge actograph
fprintf('Valid group names: \n');
for g = 1:group_N
    fprintf('\t%s\n', group_names{g});
end
fprintf('Merging actograph data...\n');
for g = 1:group_N
    activity_plt = 0;
    Ns = zeros(source_N, 1);
    for i = 1:source_N
        file_list = dir(fullfile(data_sources{i}, "*_"+group_names{g}+"_data_*.mat"));
        if isempty(file_list)
            fprintf("No data file found for group %s in source %d\n", group_names{g}, i);
            continue;
        end
        LL_act = load(fullfile(data_sources{i}, file_list(1).name));
        activity_plt = activity_plt + LL_act.activity_plt * LL_act.N_val;
        Ns(i) = LL_act.N_val;
    end
    N_val = sum(Ns);
    activity_plt = activity_plt / N_val;
    title_name = {
        "Activity Heatmap of "+group_names{g}+" (N = "+N_val+")", ...
        "Activity Trendline", ...
        "Activity Actograph of "+group_names{g}+" (N = "+N_val+")"
        };
    fig_name = "g" + g + "_" + group_names{g};
    actAcg = actograph(activity_plt, 'Ymax', Y_max_actograph, 'titleName', title_name, 'ColorPatch', colorPatch);
    if strcmp(picture_format, 'pdf')
        print(actAcg.heatmap, fullfile(save_folder, fig_name + "_heatmap"), "-d"+picture_format, "-r"+picture_resolution, "-bestfit");
        print(actAcg.actogram, fullfile(save_folder, fig_name + "_actograph"), "-d"+picture_format, "-r"+picture_resolution, "-bestfit");
    else
        print(actAcg.heatmap, fullfile(save_folder, fig_name + "_heatmap"), "-d"+picture_format, "-r"+picture_resolution);
        print(actAcg.actogram, fullfile(save_folder, fig_name + "_actograph"), "-d"+picture_format, "-r"+picture_resolution);
    end
    close all;
end

%% merge peakline
peaktime_plt = [];
peaktime_err = [];
for g = 1:group_N
    peakat_g = [];
    for i = 1:source_N
        if ismember(group_names{g}, group_name{i})
            file_list = dir(fullfile(data_sources{i}, "peak_estimates_*.mat"));
            LL_peak = load(fullfile(data_sources{i}, file_list(1).name));
            peakat_g = cat(2, peakat_g, LL_peak.peaktime_groups{g});
        end
    end
    if ~strcmp(peaktime_method, 'MaxOfMean')
        pt_plt = mean(peakat_g, 2, 'omitnan');
        pt_err = std(peakat_g, 0, 2, 'omitnan') / sqrt(size(peakat_g, 2) - sum(all(isnan(peakat_g), 1)));
        peaktime_err = cat(2, peaktime_err, pt_err);
    else
        pt_plt = mean(peakat_g, 2, 'omitnan');

        % %%% 95% confidence interval
        % pt_interval = prctile(peakat_g, [2.5, 97.5], 2);
        % pt_err = [pt_plt - pt_interval(:, 1), pt_interval(:, 2) - pt_plt];
        % peaktime_err = cat(3, peaktime_err, pt_err);

        %%% standard error
        pt_err = std(peakat_g, 0, 2, 'omitnan');
        peaktime_err = cat(2, peaktime_err, pt_err);
    end
    peaktime_plt = cat(2, peaktime_plt, pt_plt);
end

fig_pt = plotPeakDrift(peaktime_plt, peaktime_err, colorPatch_peak, 'GroupNames', group_names, 'FontSize', picture_fontsize, 'AxisVisible', 'on');
print(fig_pt, fullfile(save_folder, 'PeakDrift'), "-d"+picture_format, "-r"+picture_resolution);

%%
toc;
